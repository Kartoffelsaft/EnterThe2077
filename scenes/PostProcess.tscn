[gd_scene load_steps=14 format=2]

[ext_resource path="res://scenes/Main.tscn" type="PackedScene" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 5
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 643, 338 )
expression = "output0 = dither(amt, cd.xy)"

[sub_resource type="VisualShaderNodeGlobalExpression" id=5]
size = Vector2( 1250, 846 )
expression = "
float dither(float amount, vec2 coord) {
	float subs = 4.0;
	
	float ditherIdx[16] = float[16](
		0.000, 0.687, 0.937, 0.437,
		0.875, 0.250, 0.562, 0.125,
		0.500, 0.062, 0.375, 0.750,
		0.312, 0.812, 0.187, 0.625
	);

	float idx = amount * subs;
	float base = floor(idx);
	float leftover = idx - base;
	int cx = int(coord.x);
	int cy = int(coord.y);

	if(ditherIdx[(cx % 4) * 4 + cy % 4] < leftover) {
		return (base + 1.0) / subs;
	} else {
		return base / subs;
	}
}"

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 643, 338 )
expression = "output0 = dither(amt, cd.xy)"

[sub_resource type="VisualShaderNodeExpression" id=7]
size = Vector2( 643, 338 )
expression = "output0 = dither(amt, cd.xy)"

[sub_resource type="VisualShaderNodeVectorDecompose" id=8]

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorCompose" id=10]

[sub_resource type="VisualShader" id=11]
code = "shader_type canvas_item;


// GlobalExpression:0
	
	float dither(float amount, vec2 coord) {
		float subs = 4.0;
		
		float ditherIdx[16] = float[16](
			0.000, 0.687, 0.937, 0.437,
			0.875, 0.250, 0.562, 0.125,
			0.500, 0.062, 0.375, 0.750,
			0.312, 0.812, 0.187, 0.625
		);
	
		float idx = amount * subs;
		float base = floor(idx);
		float leftover = idx - base;
		int cx = int(coord.x);
		int cy = int(coord.y);
	
		if(ditherIdx[(cx % 4) * 4 + cy % 4] < leftover) {
			return (base + 1.0) / subs;
		} else {
			return base / subs;
		}
	}

void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Input:17

// Texture:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out5p0.xy);
		n_out18p0 = TEXTURE_tex_read.rgb;
		n_out18p1 = TEXTURE_tex_read.a;
	}

// VectorDecompose:3
	float n_out3p0 = n_out18p0.x;
	float n_out3p1 = n_out18p0.y;
	float n_out3p2 = n_out18p0.z;

// Input:20
	vec3 n_out20p0 = FRAGCOORD.xyz;

// Expression:22
	float n_out22p0;
	n_out22p0 = 0.0;
	{
		n_out22p0 = dither(n_out3p0, n_out20p0.xy)
	}

// Expression:24
	float n_out24p0;
	n_out24p0 = 0.0;
	{
		n_out24p0 = dither(n_out3p1, n_out20p0.xy)
	}

// Expression:25
	float n_out25p0;
	n_out25p0 = 0.0;
	{
		n_out25p0 = dither(n_out3p2, n_out20p0.xy)
	}

// VectorCompose:7
	vec3 n_out7p0 = vec3(n_out22p0, n_out24p0, n_out25p0);

// Output:0
	COLOR.rgb = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -546.668, 444.639 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2180, 380 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -500, 480 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( -1380, 260 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( 1620, 420 )
nodes/fragment/17/node = SubResource( 1 )
nodes/fragment/17/position = Vector2( -1400, 600 )
nodes/fragment/18/node = SubResource( 2 )
nodes/fragment/18/position = Vector2( -780, 440 )
nodes/fragment/20/node = SubResource( 3 )
nodes/fragment/20/position = Vector2( -540, 840 )
nodes/fragment/22/node = SubResource( 4 )
nodes/fragment/22/position = Vector2( 160, 40 )
nodes/fragment/22/size = Vector2( 643, 338 )
nodes/fragment/22/input_ports = "0,0,amt;1,1,cd;"
nodes/fragment/22/output_ports = "0,0,output0;"
nodes/fragment/22/expression = "output0 = dither(amt, cd.xy)"
nodes/fragment/23/node = SubResource( 5 )
nodes/fragment/23/position = Vector2( -140, -1640 )
nodes/fragment/23/size = Vector2( 1250, 846 )
nodes/fragment/23/input_ports = ""
nodes/fragment/23/output_ports = ""
nodes/fragment/23/expression = "
float dither(float amount, vec2 coord) {
	float subs = 4.0;
	
	float ditherIdx[16] = float[16](
		0.000, 0.687, 0.937, 0.437,
		0.875, 0.250, 0.562, 0.125,
		0.500, 0.062, 0.375, 0.750,
		0.312, 0.812, 0.187, 0.625
	);

	float idx = amount * subs;
	float base = floor(idx);
	float leftover = idx - base;
	int cx = int(coord.x);
	int cy = int(coord.y);

	if(ditherIdx[(cx % 4) * 4 + cy % 4] < leftover) {
		return (base + 1.0) / subs;
	} else {
		return base / subs;
	}
}"
nodes/fragment/24/node = SubResource( 6 )
nodes/fragment/24/position = Vector2( 140, 380 )
nodes/fragment/24/size = Vector2( 643, 338 )
nodes/fragment/24/input_ports = "0,0,amt;1,1,cd;"
nodes/fragment/24/output_ports = "0,0,output0;"
nodes/fragment/24/expression = "output0 = dither(amt, cd.xy)"
nodes/fragment/25/node = SubResource( 7 )
nodes/fragment/25/position = Vector2( 140, 780 )
nodes/fragment/25/size = Vector2( 643, 338 )
nodes/fragment/25/input_ports = "0,0,amt;1,1,cd;"
nodes/fragment/25/output_ports = "0,0,output0;"
nodes/fragment/25/expression = "output0 = dither(amt, cd.xy)"
nodes/fragment/connections = PoolIntArray( 18, 0, 3, 0, 17, 0, 18, 2, 5, 0, 18, 0, 7, 0, 0, 0, 20, 0, 22, 1, 3, 0, 22, 0, 22, 0, 7, 0, 20, 0, 24, 1, 20, 0, 25, 1, 3, 1, 24, 0, 3, 2, 25, 0, 24, 0, 7, 1, 25, 0, 7, 2 )

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )

[node name="ViewportContainer" type="ViewportContainer"]
material = SubResource( 12 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1600, 900 )
handle_input_locally = false
render_direct_to_screen = true
render_target_update_mode = 3

[node name="Spatial" parent="Viewport" instance=ExtResource( 1 )]

[node name="Note" type="Node" parent="."]
__meta__ = {
"_editor_description_": "This scene is currently unused as its use makes some things harder, such as setting the resolution, shadows in the 3d scene (?), and passing the mouse pointer into the scene."
}
